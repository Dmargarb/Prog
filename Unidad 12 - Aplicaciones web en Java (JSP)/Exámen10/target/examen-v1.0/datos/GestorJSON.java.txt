/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package pokedex;

/**
 *
 * @author David
 */
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import java.io.FileReader;
import java.io.Reader;
import java.util.ArrayList;

public class GestorJSON {

  private final ArrayList<Pokemon> listaPokemon;

  public GestorJSON() {
    this.listaPokemon = new ArrayList<>();
  }

  public void importarJSON(String nombreFichero) {
    try {
      JSONParser parser = new JSONParser();
      Reader reader = new FileReader(nombreFichero);
      Object jsonObj = parser.parse(reader);
      JSONObject jsonObject = (JSONObject) jsonObj;

      JSONArray pokemons = (JSONArray) jsonObject.get("pokemon");

      pokemons.forEach(entry -> {

        JSONObject pokemonObject = (JSONObject) entry;
        
        String num = (String) pokemonObject.get("num");
        String name = (String) pokemonObject.get("name");
        String descripcion = (String) pokemonObject.get("short_description");

        JSONArray tipos = (JSONArray) pokemonObject.get("type");
        ArrayList<String> types = new ArrayList<>();

        tipos.forEach(entryType -> {
          types.add((String) entryType);
        });

        JSONArray debilidades = (JSONArray) pokemonObject.get("weaknesses");
        ArrayList<String> weaknesses = new ArrayList<>();

        debilidades.forEach(entryWeaknesses -> {
          weaknesses.add((String) entryWeaknesses);
        });

        ArrayList<String> nextEvolutionNames = new ArrayList<>();
        JSONArray nextEvolutions = (JSONArray) pokemonObject.get("next_evolution");
        
        if (nextEvolutions != null){
          
          nextEvolutions.forEach(nextEvolutionEntry -> {
            
          JSONObject nextEvolutionObject = (JSONObject) nextEvolutionEntry;
          String nextEvolutionName = (String) nextEvolutionObject.get("name");
          nextEvolutionNames.add(nextEvolutionName);
          
        });
        }
        
        Pokemon pokemon = new Pokemon(num, name, img, types, weaknesses, nextEvolutionNames);

        listaPokemon.add(pokemon);
      });

    } catch (Exception e) {
      e.printStackTrace();
    }
  }

// Método getter para obtener la lista de Pokémon
  public ArrayList<Pokemon> getListaPokemon() {
    return listaPokemon;
  }
}


Map<Object, Object> videojuegos = (Map<Object, Object>) jsonObject;

Necesito hacer estos TODO:

      // TODO recorrer el mapa, crear un JSONObject por cada valor y recuperar de él los campos deseados
      // TODO Si cadenaBusqueda es null añadimos al ArrayList todos los videojuegos
      // En otro caso, los añadimos solo si cadenaBusqueda se encuentra contenida en el nombre o la descripción


<Map<Object, Object>> videojuegosFiltrados = new ArrayList<>();

        // Definir la cadena de búsqueda (si es null, no se aplicará filtro)
        String cadenaBusqueda = null;

        // Recorrer el mapa de videojuegos
        for (Map.Entry<Object, Object> entry : videojuegos.entrySet()) {
            // Obtener el valor de cada entrada
            Object value = entry.getValue();

            // Comprobar si el valor es un JSONObject
            if (value instanceof JSONObject) {
                JSONObject juego = (JSONObject) value;

                // Recuperar los campos deseados del JSONObject
                String nombre = juego.optString("nombre", "");
                String descripcion = juego.optString("descripcion", "");

                // Verificar si la cadena de búsqueda es nula o si se encuentra en el nombre o la descripción
                if (cadenaBusqueda == null || nombre.contains(cadenaBusqueda) || descripcion.contains(cadenaBusqueda)) {
                    // Añadir el videojuego al ArrayList de videojuegos filtrados
                    videojuegosFiltrados.add(entry);
                }
            }
        }
    }
}

public class GestorJSON {

  private final ArrayList<Videojuego> listaVideojuegos;

  public GestorJSON() {
    this.listaVideojuegos = new ArrayList<>();
  }

  @SuppressWarnings("unchecked")
  public void importarJSON(String nombreFichero, String cadenaBusqueda) {
    try {
      JSONParser parser = new JSONParser();
      Reader reader;
      reader = new FileReader(nombreFichero);
      Object jsonObj = parser.parse(reader);
      JSONObject jsonObject = (JSONObject) jsonObj;

      // Leemos el conjunto de videojuegos
      Map<Object, Object> videojuegos = (Map<Object, Object>) jsonObject;
      
      
              
      


      // TODO recorrer el mapa, crear un JSONObject por cada valor y recuperar de él los campos deseados
      // TODO Si cadenaBusqueda es null añadimos al ArrayList todos los videojuegos
      // En otro caso, los añadimos solo si cadenaBusqueda se encuentra contenida en el nombre o la descripción
      // Cerramos el lector
      reader.close();
    } catch (IOException | ParseException ex) {
      System.out.println(ex);

    }
  }

  public ArrayList<Videojuego> getListaVideojuegos() {
    return listaVideojuegos;
  }
}

Haz los TODO